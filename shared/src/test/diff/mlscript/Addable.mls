
class Addable[A]
  method Add: A -> A
//│ Defined class Addable
//│ Declared Addable.Add: (Addable['A] & this) -> 'A -> 'A

class Number: Addable[Number] & { val: int }
  method Add that = Number { val = this.val + that.val }
//│ Defined class Number
//│ Defined Number.Add: (number & {val: int} & this) -> {val: int} -> (number & {val: int})

class Str: Addable[Str] & { val: string }
  method Add that = Str { val = concat this.val that.val }
//│ Defined class Str
//│ Defined Str.Add: (Str & this) -> {val: string} -> Str

n = Number { val = 1 }
//│ n: number & {val: 1}
//│  = Number { val: 1 }

// TODO why not simplified?
n.Add n
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.22: 	n.Add n
//│ ║        	^^^^^
//│ ╟── application of type `number & {val: ?val}` is not an instance of type This
//│ ║  l.17: 	n = Number { val = 1 }
//│ ║        	    ^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `this`
//│ ║  l.22: 	n.Add n
//│ ╙──      	^
//│ res: error | number & {val: int}
//│    = Number { val: 2 }


def addTwo a0 a1 = a0.Add a1
//│ addTwo: (Addable['A] & this) -> 'A -> 'A
//│       = [Function: addTwo]

addTwo n n
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.40: 	addTwo n n
//│ ║        	^^^^^^^^
//│ ╟── application of type `number & {val: ?val}` is not an instance of type This
//│ ║  l.17: 	n = Number { val = 1 }
//│ ║        	    ^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `this`
//│ ║  l.40: 	addTwo n n
//│ ║        	       ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.36: 	def addTwo a0 a1 = a0.Add a1
//│ ╙──      	                   ^^
//│ res: error | number & {val: int}
//│    = Number { val: 2 }

s = Str { val = "hey" }
//│ s: Str & {val: "hey"}
//│  = Str { val: 'hey' }

// TODO why not simplified?
s.Add s
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.61: 	s.Add s
//│ ║        	^^^^^
//│ ╟── application of type `Str & {val: ?val}` is not an instance of type This
//│ ║  l.56: 	s = Str { val = "hey" }
//│ ║        	    ^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `this`
//│ ║  l.61: 	s.Add s
//│ ╙──      	^
//│ res: error | Str
//│    = Str { val: 'heyhey' }

addTwo s s
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.74: 	addTwo s s
//│ ║        	^^^^^^^^
//│ ╟── application of type `Str & {val: ?val}` is not an instance of type This
//│ ║  l.56: 	s = Str { val = "hey" }
//│ ║        	    ^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `this`
//│ ║  l.74: 	addTwo s s
//│ ║        	       ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.36: 	def addTwo a0 a1 = a0.Add a1
//│ ╙──      	                   ^^
//│ res: error | Str
//│    = Str { val: 'heyhey' }



def addSame a = a.Add a
//│ addSame: (Addable['A] & this & 'A) -> 'A
//│        = [Function: addSame]

addSame n
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.96: 	addSame n
//│ ║        	^^^^^^^^^
//│ ╟── application of type `number & {val: ?val}` is not an instance of type This
//│ ║  l.17: 	n = Number { val = 1 }
//│ ║        	    ^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `this`
//│ ║  l.96: 	addSame n
//│ ║        	        ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.92: 	def addSame a = a.Add a
//│ ╙──      	                ^
//│ res: error | number & {val: int}
//│    = Number { val: 2 }


rec def addNTimes a n =
  if n <= 1 then a else a.Add (addNTimes a (n - 1))
//│ addNTimes: (Addable['A] & this & 'A) -> int -> 'A
//│          = [Function: addNTimes]

addNTimes n 12
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.118: 	addNTimes n 12
//│ ║         	^^^^^^^^^^^
//│ ╟── application of type `number & {val: ?val}` is not an instance of type This
//│ ║  l.17: 	n = Number { val = 1 }
//│ ║        	    ^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `this`
//│ ║  l.118: 	addNTimes n 12
//│ ║         	          ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.114: 	  if n <= 1 then a else a.Add (addNTimes a (n - 1))
//│ ╙──       	                        ^
//│ res: error | number & {val: int}
//│    = Number { val: 12 }

addNTimes s 5
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.134: 	addNTimes s 5
//│ ║         	^^^^^^^^^^^
//│ ╟── application of type `Str & {val: ?val}` is not an instance of type This
//│ ║  l.56: 	s = Str { val = "hey" }
//│ ║        	    ^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `this`
//│ ║  l.134: 	addNTimes s 5
//│ ║         	          ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.114: 	  if n <= 1 then a else a.Add (addNTimes a (n - 1))
//│ ╙──       	                        ^
//│ res: error | Str
//│    = Str { val: 'heyheyheyheyhey' }




// === === === ERROR CASES === === === //


:ShowRelativeLineNums
:AllowTypeErrors


rec def addNTimes a n =
  if n < 0 then 0 else a.Add (addNTimes a (n - 1))
addNTimes n 12
//│ addNTimes: (Addable[0 | 'A .. 'A] & this) -> int -> (0 | 'A)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+3: 	addNTimes n 12
//│ ║        	^^^^^^^^^^^
//│ ╟── application of type `number & {val: ?val}` is not an instance of type This
//│ ║  l.17: 	n = Number { val = 1 }
//│ ║        	    ^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `this`
//│ ║  l.+3: 	addNTimes n 12
//│ ║        	          ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.+2: 	  if n < 0 then 0 else a.Add (addNTimes a (n - 1))
//│ ╙──      	                       ^
//│ res: error

rec def addNTimes a n =
  if n <= 0 then 0 else a.Add addNTimes a (n - 1)
addNTimes n 12
//│ addNTimes: ('a & (Addable['a -> int -> (0 | 'b) | 'A .. 'c -> int -> 'b & 'A] & this & 'c,)) -> int -> (0 | 'b)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+3: 	addNTimes n 12
//│ ║        	^^^^^^^^^^^
//│ ╟── application of type `number & {val: ?val}` is not an instance of type This
//│ ║  l.17: 	n = Number { val = 1 }
//│ ║        	    ^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `this`
//│ ║  l.+3: 	addNTimes n 12
//│ ║        	          ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.+2: 	  if n <= 0 then 0 else a.Add addNTimes a (n - 1)
//│ ╙──      	                        ^
//│ res: error

addSame n n
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	addSame n n
//│ ║        	^^^^^^^^^
//│ ╟── application of type `number & {val: ?val}` is not an instance of type This
//│ ║  l.17: 	n = Number { val = 1 }
//│ ║        	    ^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `this`
//│ ║  l.+1: 	addSame n n
//│ ║        	        ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.92: 	def addSame a = a.Add a
//│ ╙──      	                ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	addSame n n
//│ ║        	^^^^^^^^^^^
//│ ╟── application of type `number & {val: ?val}` is not a function
//│ ║  l.17: 	n = Number { val = 1 }
//│ ║        	    ^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `?a -> ?b`
//│ ║  l.+1: 	addSame n n
//│ ╙──      	        ^
//│ res: error

addTwo s n
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	addTwo s n
//│ ║        	^^^^^^^^
//│ ╟── application of type `Str & {val: ?val}` is not an instance of type This
//│ ║  l.56: 	s = Str { val = "hey" }
//│ ║        	    ^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `this`
//│ ║  l.+1: 	addTwo s n
//│ ║        	       ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.36: 	def addTwo a0 a1 = a0.Add a1
//│ ╙──      	                   ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	addTwo s n
//│ ║        	^^^^^^^^^^
//│ ╟── application of type `number & {val: ?val}` is not an instance of type Str
//│ ║  l.17: 	n = Number { val = 1 }
//│ ║        	    ^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Str`
//│ ║  l.+1: 	addTwo s n
//│ ║        	         ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.12: 	class Str: Addable[Str] & { val: string }
//│ ║        	                   ^^^
//│ ╟── from reference:
//│ ║  l.36: 	def addTwo a0 a1 = a0.Add a1
//│ ╙──      	                          ^^
//│ res: error

class Str_bad_0: Addable[Str_bad_0] & { val: string }
  method Add that = Str_bad_0 { val = this.val + that.val }
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.+2: 	  method Add that = Str_bad_0 { val = this.val + that.val }
//│ ║        	                                      ^^^^^^^^^^
//│ ╟── type `string` does not match type `int`
//│ ║  l.+1: 	class Str_bad_0: Addable[Str_bad_0] & { val: string }
//│ ║        	                                             ^^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.+2: 	  method Add that = Str_bad_0 { val = this.val + that.val }
//│ ╙──      	                                      ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+2: 	  method Add that = Str_bad_0 { val = this.val + that.val }
//│ ║        	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` does not match type `string`
//│ ║  l.+2: 	  method Add that = Str_bad_0 { val = this.val + that.val }
//│ ║        	                                      ^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.+1: 	class Str_bad_0: Addable[Str_bad_0] & { val: string }
//│ ╙──      	                                             ^^^^^^
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.+2: 	  method Add that = Str_bad_0 { val = this.val + that.val }
//│ ║        	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `string` does not match type `int`
//│ ║  l.+1: 	class Str_bad_0: Addable[Str_bad_0] & { val: string }
//│ ║        	                                             ^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.+2: 	  method Add that = Str_bad_0 { val = this.val + that.val }
//│ ╙──      	                                                 ^^^^^^^^
//│ Defined class Str_bad_0
//│ Defined Str_bad_0.Add: (Str_bad_0 & this) -> {val: int} -> (error | (Str_bad_0 with {val: error | int}))

