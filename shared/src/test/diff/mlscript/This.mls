:NoJS

class A
  method Foo: int -> this
//│ Defined class A
//│ Declared A.Foo: (A & 'a) -> int -> 'a

class B: A
  method Foo n = this
//│ Defined class B
//│ Defined B.Foo: (B & 'a) -> anything -> 'a

a = B{}
//│ a: B

a.Foo 1 // : B
//│ res: B

def b: A
b = a
b.Foo 1 // : A
//│ b: A
//│ B
//│   <:  b:
//│ A
//│ res: A

:d
class Box[T]: { inner: T }
  method Get = this.inner // Used to be Box.Get: Box['T] -> 'T
//│ 1. Typing type Record(List((inner,TypeName(T))))
//│ | vars=Map(T -> T0') newDefsInfo=Map(Box -> (Cls,1))
//│ => {inner: T0'} | 
//│ 1. Typing term this.inner
//│ | 1. Typing term this
//│ | 1. : [α1']
//│ | CONSTRAIN [[α1']] <! {inner: α3'}
//│ |   where α1' <: Box[T0']
//│ | C [[α1']] <! {inner: α3'}
//│ | | C [α1'] <! {inner: α3'}
//│ | | | C α1' <! {inner: α3'}
//│ 1. : α3'
//│ >> Checking subsumption for inferred type of Get : MethodType(0,Some([α3']),List(TypeName(Box)),true)
//│ Defined class Box
//│ Typed as: ((α4) -> [α5])
//│  where: α4 <: [[[{inner: α5}]]] & Box[T6]
//│ ty[true] ((α4) -> [α5])
//│ -> DNF(((α4) -> [α5]){})
//│ DNF[true] DNF(((α4) -> [α5]){})
//│ | ty[false] (α4)
//│ | -> DNF((α4){})
//│ | DNF[false] DNF((α4){})
//│ | | ty[false] α4
//│ | | | Consider α4 List() List([[[{inner: α5}]]], Box[T6])
//│ | | -> DNF(box<>{inner: (α5 & T6), Box#T: (T6 -> T6)}∧α4)
//│ | | DNF[false] DNF(box<>{inner: (α5 & T6), Box#T: (T6 -> T6)}∧α4)
//│ | | | ty[false] (α5 & T6)
//│ | | | | Consider α5 List() List()
//│ | | | | Consider T6 List() List()
//│ | | | -> DNF(α5∧T6)
//│ | | | DNF[false] DNF(α5∧T6)
//│ | | | | Renewed α5 ~> α7
//│ | | | | Renewed T6 ~> T8
//│ | | | ~> (α7 & T8)
//│ | | | ty[false] (T6 -> T6)
//│ | | | -> DNF((T6 -> T6){})
//│ | | | DNF[false] DNF((T6 -> T6){})
//│ | | | | ty[true] T6
//│ | | | | | Consider T6 List() List()
//│ | | | | -> DNF(T6)
//│ | | | | DNF[true] DNF(T6)
//│ | | | | ~> T8
//│ | | | | ty[false] T6
//│ | | | | | Consider T6 List() List()
//│ | | | | -> DNF(T6)
//│ | | | | DNF[false] DNF(T6)
//│ | | | | ~> T8
//│ | | | ~> (T8 -> T8)
//│ | | | Renewed α4 ~> α9
//│ | | ~> ((box<> & {Box#T: (T8 -> T8), inner: (α7 & T8)}) & α9)
//│ | ~> (((box<> & {Box#T: (T8 -> T8), inner: (α7 & T8)}) & α9))
//│ | ty[true] [α5]
//│ | | Consider α5 List() List()
//│ | -> DNF(α5)
//│ | DNF[true] DNF(α5)
//│ | ~> α7
//│ ~> ((((box<> & {Box#T: (T8 -> T8), inner: (α7 & T8)}) & α9)) -> α7)
//│ Canon: ((((box<> & {Box#T: (T8 -> T8), inner: (α7 & T8)}) & α9)) -> α7)
//│  where: 
//│ ! true T8 None
//│ ! false T8 None
//│ ! true α7 None
//│ [occs] LinkedHashMap((true,T8) -> HashSet(T8), (false,T8) -> HashSet(T8), (false,α7) -> HashSet(α7, T8), (false,α9) -> HashSet(α9, box<>), (true,α7) -> HashSet(α7))
//│ [vars] TreeSet(α7, T8, α9)
//│ [bounds] 
//│ [rec] HashSet()
//│ [!] α9
//│ [v] α7 Some(HashSet(α7)) Some(HashSet(α7, T8))
//│ [v] T8 Some(HashSet(T8)) Some(HashSet(T8))
//│ [sub] α9 -> None
//│ Renewed T8 ~> T10
//│ Renewed α7 ~> α11
//│ Type after simplification: (((box<> & {Box#T: (T10 -> T10), inner: (α11 & T10)})) -> α11)
//│  where: 
//│ ty[true] (((box<> & {Box#T: (T10 -> T10), inner: (α11 & T10)})) -> α11)
//│ -> DNF((((box<> & {Box#T: (T10 -> T10), inner: (α11 & T10)})) -> α11){})
//│ DNF[true] DNF((((box<> & {Box#T: (T10 -> T10), inner: (α11 & T10)})) -> α11){})
//│ | ty[false] ((box<> & {Box#T: (T10 -> T10), inner: (α11 & T10)}))
//│ | -> DNF(((box<> & {Box#T: (T10 -> T10), inner: (α11 & T10)})){})
//│ | DNF[false] DNF(((box<> & {Box#T: (T10 -> T10), inner: (α11 & T10)})){})
//│ | | ty[false] (box<> & {Box#T: (T10 -> T10), inner: (α11 & T10)})
//│ | | -> DNF(box<>{inner: (α11 & T10), Box#T: (T10 -> T10)})
//│ | | DNF[false] DNF(box<>{inner: (α11 & T10), Box#T: (T10 -> T10)})
//│ | | | ty[false] (α11 & T10)
//│ | | | | Consider T10 List() List()
//│ | | | | Consider α11 List() List()
//│ | | | -> DNF(T10∧α11)
//│ | | | DNF[false] DNF(T10∧α11)
//│ | | | | Renewed T10 ~> T12
//│ | | | | Renewed α11 ~> α13
//│ | | | ~> (T12 & α13)
//│ | | | ty[false] (T10 -> T10)
//│ | | | -> DNF((T10 -> T10){})
//│ | | | DNF[false] DNF((T10 -> T10){})
//│ | | | | ty[true] T10
//│ | | | | | Consider T10 List() List()
//│ | | | | -> DNF(T10)
//│ | | | | DNF[true] DNF(T10)
//│ | | | | ~> T12
//│ | | | | ty[false] T10
//│ | | | | | Consider T10 List() List()
//│ | | | | -> DNF(T10)
//│ | | | | DNF[false] DNF(T10)
//│ | | | | ~> T12
//│ | | | ~> (T12 -> T12)
//│ | | ~> (box<> & {Box#T: (T12 -> T12), inner: (T12 & α13)})
//│ | ~> ((box<> & {Box#T: (T12 -> T12), inner: (T12 & α13)}))
//│ | ty[true] α11
//│ | | Consider α11 List() List()
//│ | -> DNF(α11)
//│ | DNF[true] DNF(α11)
//│ | ~> α13
//│ ~> (((box<> & {Box#T: (T12 -> T12), inner: (T12 & α13)})) -> α13)
//│ Recanon: (((box<> & {Box#T: (T12 -> T12), inner: (T12 & α13)})) -> α13)
//│  where: 
//│ ! true T12 None
//│ ! false T12 None
//│ ! true α13 None
//│ [occs] LinkedHashMap((true,T12) -> HashSet(T12), (false,T12) -> HashSet(T12), (false,α13) -> HashSet(T12, α13), (true,α13) -> HashSet(α13))
//│ [vars] TreeSet(T12, α13)
//│ [bounds] 
//│ [rec] HashSet()
//│ [v] T12 Some(HashSet(T12)) Some(HashSet(T12))
//│ [v] α13 Some(HashSet(α13)) Some(HashSet(T12, α13))
//│ [sub] 
//│ Renewed T12 ~> T14
//│ Renewed α13 ~> α15
//│ Resimplified: (((box<> & {Box#T: (T14 -> T14), inner: (T14 & α15)})) -> α15)
//│  where: 
//│ Recons: (((Box[T14] & {inner: (T14 & α15)})) -> α15)
//│ Defined Box.Get: (Box['T] & {inner: 'T & 'a}) -> 'a
